import java.io.*;
import java.util.*;

public class NastyaAndDoor {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int t = Integer.parseInt(br.readLine().trim());
        StringBuilder sb = new StringBuilder();

        while (t-- > 0) {
            st = new StringTokenizer(br.readLine());
            int n = Integer.parseInt(st.nextToken());
            int k = Integer.parseInt(st.nextToken());

            int[] a = new int[n];
            st = new StringTokenizer(br.readLine());
            for (int i = 0; i < n; i++) {
                a[i] = Integer.parseInt(st.nextToken());
            }

            int[] isPeak = new int[n];
            for (int i = 1; i < n - 1; i++) {
                if (a[i] > a[i - 1] && a[i] > a[i + 1]) {
                    isPeak[i] = 1;
                } else {
                    isPeak[i] = 0;
                }
            }

            int[] pref = new int[n];
            pref[0] = 0;
            for (int i = 1; i < n; i++) {
                pref[i] = pref[i - 1] + isPeak[i];
            }

            int bestL = 1;
            int maxPeaks = -1;
            for (int l = 0; l + k - 1 < n; l++) {
                int r = l + k - 1;
                // peaks between l+1 and r-1: indices from (l+1) to (r-1)
                int curPeaks = pref[r - 1] - pref[l];
                if (curPeaks > maxPeaks) {
                    maxPeaks = curPeaks;
                    bestL = l + 1; // converting 0-based to 1-based
                }
            }
            sb.append((maxPeaks + 1)).append(" ").append(bestL).append("\n");
        }

        System.out.print(sb.toString());
    }
}
